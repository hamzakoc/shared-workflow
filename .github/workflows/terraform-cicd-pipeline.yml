# .github/workflows/terraform_pipeline.yml

name: Terraform CI/CD Pipeline for Azure

on:
  push:
    branches:
      - 'main'
      - 'develop'
  pull_request:
    types: [closed]
    branches:
      - main  # Only run apply on main after PR approval
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (init-plan, apply, or destroy)'
        required: true
        default: 'init-plan'
        options:
          - 'init-plan'
          - 'apply'
          - 'destroy'

env:
  TF_LOG: DEBUG
  TF_INPUT: false
  APPLICATION_NAME: "your-app-name"

jobs:
  init_and_plan:
    name: Terraform Init and Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.action == 'init-plan'
    env:
      ARM_SUBSCRIPTION_ID: ${{ github.ref == 'refs/heads/main' && vars.PROD_SUBSCRIPTION_ID || vars.DEV_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
      ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}
      BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}
      BACKEND_STORAGE_CONTAINER_NAME: ${{ vars.BACKEND_STORAGE_CONTAINER_NAME }}
      TF_VAR_application_name: ${{ env.APPLICATION_NAME }}
      TF_VAR_environment_name: ${{ github.ref_name }}
      TF_BACKEND_KEY: ${{ env.APPLICATION_NAME }}-${{ github.ref_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ github.event.inputs.terraform_version || '1.5.5' }}
      
      - name: Terraform Init with Azure Backend
        run: |
          terraform init \
            -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
            -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$BACKEND_STORAGE_CONTAINER_NAME" \
            -backend-config="key=$TF_BACKEND_KEY" \
            -reconfigure
        env:
          TF_VAR_additional: ${{ github.event.inputs.additional_vars || '{}' }}

      - name: Terraform Plan
        run: |
          terraform plan -var-file=${{ github.ref_name == 'main' && 'prod.tfvars' || 'dev.tfvars' }} -input=false -out=tfplan
          terraform show -json tfplan > tfplan.json

      - name: Upload Plan as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: tfplan.json

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged && github.ref == 'refs/heads/main' }}
    needs: init_and_plan
    env:
      ARM_SUBSCRIPTION_ID: ${{ vars.PROD_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
      ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ github.event.inputs.terraform_version || '1.5.5' }}

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan

  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' }}
    env:
      ARM_SUBSCRIPTION_ID: ${{ github.ref == 'refs/heads/main' && vars.PROD_SUBSCRIPTION_ID || vars.DEV_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
      ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ github.event.inputs.terraform_version || '1.5.5' }}

      - name: Terraform Destroy
        run: terraform destroy -var-file=${{ github.ref_name == 'main' && 'prod.tfvars' || 'dev.tfvars' }} -input=false -auto-approve

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Delete Terraform Plan Artifact
        if: ${{ github.event.inputs.action == 'init-plan' || github.event.inputs.action == 'apply' }}
        uses: actions/delete-artifact@v1
        with:
          name: terraform-plan

      - name: Notify Completion
        run: |
          echo "Terraform action completed. Action: ${{ github.event.inputs.action }}."
